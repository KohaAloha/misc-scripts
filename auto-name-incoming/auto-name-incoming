#!/usr/bin/perl

# auto-name-incoming
#
# Quick dirty script to watch a directory for new files and automagically
# move them to another directory, automatically naming them,
#
# A useful trick for saving images from stock photo sites which are misconfigured
# so that the browser tries to save each image as download.php etc.
#
# A little rough, but not too bad for something knocked up in about 30 minutes
# at night.  God bless Perl :-)
#
# David Precious <davidp@preshweb.co.uk>


use strict;
use File::Copy;

my %params = &get_cli_params;


if (!$params{'watch'}) {
	print "Must specify directory to watch for new files with --watch\n\n"
	     ."Use --help for all options.\n";
	exit 1;
}
if (!$params{'target'}) {
	print "Must specify target directory with --target\n\n"
	     ."Use --help for all options.\n";
	exit 2;
}
	
if ($params{'help'}) { &print_help; }

$params{'watch'}  .= '/' unless (substr($params{'watch'},  -1, 1) eq '/');
$params{'target'} .= '/' unless (substr($params{'target'}, -1, 1) eq '/');


# right, get to it

while (1) {
    opendir(my $dirh, $params{watch})
        or die "Cannot open directory $params{watch} - $!";
    my @files = readdir($dirh);
    closedir($dirh);
    
    for my $file (@files) {
        next if ($file eq "." || $file eq "..");

        next if ($file =~ /\.part$/); # skip partial files...

        $file = $params{watch} . $file;

        my $ext = ($file =~ /\.(.+)$/)? $1 : '';
        $ext = ($params{'force-ext'})? $params{'force-ext'} : $ext;
        if ($ext && substr($ext, 0, 1) ne '.') { $ext = '.' . $ext; }

        my $prefix = ($params{prefix})? $params{prefix} : '';

        $params{start} = 0 unless $params{start};

        my $targetfile;
        my $digits = $params{digits} || 4;
        for (my $x = $params{'start'}; $x <= 9 x $digits; $x++) {
            $targetfile = $params{target} . $prefix
                . sprintf("%0${digits}d", $x) . $ext;
            last unless (-e $targetfile);
        }
                
        print "$file -> $targetfile\n";

        copy($file, $targetfile) or die "File cannot be copied.";
        unlink($file) || die "Failed to unlink $file ($!)!";

    } # end of foreach loop through incoming files
            
    sleep 1; # no need to continuously poll for files, so be nice

    
} # end of inifinite while() loop



sub print_help {

print qq[

auto-name-incoming takes the following parameters:

 --watch=... specifies the directory to watch for incoming files

 --target=... specifies the directory renamed files should go in

The following optional parameters customise its behaviour:

 --digits=  specifies the number of digits to use (default 4)

 --prefix=  specifies text to prefix the renamed file with

 --force-ext= forces the file extension to this (default is to keep existing)

 --start=  forces digit numbering to start at given value

];
exit;
 
} # end of sub print_help


# TODO: Why did I re-invent this wheel?  Use one of the many much more circular
# ones already on CPAN....
sub get_cli_params {
    # returns a hash of all the parameters passed to us on the command
    # line as --param[=value].
    
    # let's get the params given to us on the command line:
    my %myargs = ();
    for my $arg (@ARGV) {
        if ($arg =~ /\-\-([a-z0-9_-]+)=?(.+)?$/ig) {
            $myargs{$1} = $2;
            if (!$myargs{$1}) { $myargs{$1} = ''; }
            # make sure it that got set, since if the arg
            # has no value, it won't get set otherwise.
        }
    }
    
    return %myargs;

} # end of sub get_cli_params






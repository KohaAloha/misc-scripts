#!/usr/bin/perl

# A quick script to extract connection details (signal/noise ratio, etc) from 
# a Virgin Media (ex NTL) cable modem and insert them in an SQLite DB for later
# analysis.
#
# Written for myself to monitor my connection, but may perhaps be useful to
# others (feel free to let me know if it's useful to you!)
#
# David Precious <davidp@preshweb.co.uk>, 2011

use strict;
use DBI;
use LWP::UserAgent;
use HTML::TableExtract;

# Amend this to suit your database
my $dbh = DBI->connect(
    'dbi:mysql:database=modemstats;',  # tweak to suit your DB
    'davidp', 'davidp',                # and put real credentials here
    {'RaiseError' => 1 }, 
) or die "Failed to connect to database - $DBI::errstr"; 

# Cable modem config details:
my $user = "root";
my $pass = "root";
my $modem = "192.168.100.1";


###############################################################################
# The following patch, subclassing LWP::UserAgent to provide basic auth only,
# was contributed by Jeff Fern, who noted that the original version (which had
# worked for my Ambit 120 CM) didn't work for him; this change made it work for
# him.  I no longer use my CM (I got upgraded to the "Super"Hub), so I haven't
# been able to test this; if you have authentication problems, you may wish to
# try the previous version (use GitHub to find the commit this change was added
# in, and use the one before :) ).
{
    package RequestAgent;
    our @ISA = qw(LWP::UserAgent);
    sub get_basic_credentials {
        return ($user, $pass);
    }
}


my $verbose = 0;

my $sth = $dbh->prepare('INSERT INTO stats (`key`,`value`) VALUES(?,?)')
    or die "Failed to prepare INSERT query - " . $dbh->errstr;

my $ua = RequestAgent->new;

# Fetch upstream/downstream stats
for my $page (qw(CmDnstream.asp CmUpstream.asp)) {
    my $res = $ua->get("http://$modem/$page");
    if (!$res->is_success) {
        die "Failed to fetch $page from CM - " . $res->status_line;
    }

    my $te = HTML::TableExtract->new(attribs => { width => 510, height => 300 });
    $te->parse($res->content)
        or die "Failed to parse HTML for table";

    my $table = $te->first_table_found
        or die "No table matched";
    for my $row ($table->rows) {
        my ($key,$value) = @$row;
        $key =~ s/\s+:\s+//;
        next unless $key =~ /\S+/;
        print "'$key' => '$value'\n" if $verbose;
        $sth->execute($key, $value);
    }

}

# Now, fetch any event log entries:
my $res = $ua->get("http://$modem/CmEventLog.asp");
if (!$res->is_success) {
    die "Failed to fetch event log page";
}

my $te = HTML::TableExtract->new(attribs => { id => 'LogTable' });
$te->parse($res->content)
    or die "Failed to parse HTML for table";
my $table = $te->first_table_found
    or die "Failed to find table";

my $log_sth = $dbh->prepare(
    "INSERT INTO eventlog (first_time, last_time, priority, description)"
    ." VALUES(?, ?, ?, ?)"
);
my $seen_headers;
for my $row ($table->rows) {
    next unless $seen_headers++;
    my ($first, $last, $priority, $description) = @$row;
    print "[$first][$last][$priority][$description]\n" if $verbose;
    $log_sth->execute($first, $last, $priority, $description);
}

# Now we've inserted any log entries into the DB, clear the log so we don't see
# them again next time.
# Yes, there is a potential race condition here, where an event could be logged
# between us fetching the page and then clearing the log, in which case that
# event would be lost.  That's not the end of the world.  In an ideal world, I
# wouldn't be using this nasty approach, I'd just be telling the modem to syslog
# to a real box.

# We'll get a redirect as the result of this POST:
push @{ $ua->requests_redirectable }, 'POST';
$res = $ua->post("http://$modem/goform/CmEventLog",
    { submit => 'Clear Log', SnmpClearEventLog => 2 });
if (!$res->is_success) {
    die "Failed to clear event log - " . $res->status_line;
}

